# DEFINE THE START STATE AND FINAL STATES
Start_state = START
Final_state = START, IDENTIFIER, COLON, SEMICOLON, NUMBER, DOT, COMMA, LT, LEQ, NEQ, GT, EQ, ARITHMETIC_OP, NEGATIVE, SUBSTRACT, DIVIDE, LPAREN, RPAREN, LBRACK, RBRACK, COMMENT_START, COMMENT_END, LEQ, NEQ, GEQ, ASSIGNMENT_OP, NUMBER_FLOAT, S_NUMBER, RANGE_OPERATOR, CHAR_LITERAL, STRING_LITERAL, COMMENT_START_P, COMMENT_END_P, COMMENT_START_B, COMMENT_END_B, COMMENT_START_S, COMMENT_END_S

# --- Whitespace and Initial Transitions ---
START A..Z,a..z,_ IDENTIFIER
START , COMMA
START ( LPAREN
START ) RPAREN
START [ LBRACK
START ] RBRACK

# --- Numbers ---
START 0..9 NUMBER
NEGATIVE 0..9 NUMBER
NUMBER 0..9 NUMBER
NUMBER . NUMBER_DOT
NUMBER_DOT 0..9 NUMBER_FLOAT
NUMBER_FLOAT 0..9 NUMBER_FLOAT
NUMBER e,E NOTATION
NUMBER_FLOAT e,E NOTATION
NOTATION +,- NOTATION_OP
NOTATION 0..9 S_NUMBER
NOTATION_OP 0..9 S_NUMBER
S_NUMBER 0..9 S_NUMBER
NUMBER - SUBSTRACT
NUMBER_FLOAT - SUBSTRACT
S_NUMBER - SUBSTRACT
NUMBER   SPACE_NUM
NUMBER_FLOAT   SPACE_NUM
S_NUMBER   SPACE_NUM
SPACE_NUM - SUBSTRACT
SPACE_NUM   SPACE_NUM

# --- Operators (Multi-character) ---
START : COLON
START ; SEMICOLON
START . DOT
START < LT
START > GT
START = EQ
START +,* ARITHMETIC_OP
START / DIVIDE
START - NEGATIVE
LT = LEQ
LT > NEQ
GT = GEQ
COLON = ASSIGNMENT_OP
DOT . RANGE_OPERATOR

# --- Comments ---
START { COMMENT_START_B
DIVIDE / COMMENT_START_S
COMMENT_START_S ALL_EXCEPT 
 COMMENT_S
COMMENT_START_S 
 COMMENT_END_S
COMMENT_S ALL_EXCEPT 
 COMMENT_S
COMMENT_S 
 COMMENT_END_S
LPAREN * COMMENT_START_P
COMMENT_START_P * COMMENT_END_TEMP_P
COMMENT_START_P ALL_EXCEPT * COMMENT_P
COMMENT_P * COMMENT_END_TEMP_P
COMMENT_P ALL_EXCEPT * COMMENT_P
COMMENT_END_TEMP_P ALL_EXCEPT ) COMMENT_P
COMMENT_END_TEMP_P * COMMENT_END_TEMP_P
COMMENT_END_TEMP_P ) COMMENT_END_P
COMMENT_START_B ALL_EXCEPT } COMMENT_B
COMMENT_B ALL_EXCEPT } COMMENT_B
COMMENT_B } COMMENT_END_B

# --- String and Char Literals ---
START ' APOSTROPHE
APOSTROPHE ALL_EXCEPT ' CHAR_BUILD
CHAR_BUILD ALL_EXCEPT ' STRING_BUILD
CHAR_BUILD ' CHAR_LITERAL
CHAR_LITERAL ' SUB_STRING
STRING_BUILD ALL_EXCEPT ' STRING_BUILD
STRING_BUILD ' STRING_LITERAL
STRING_LITERAL ' SUB_STRING
SUB_STRING ALL_EXCEPT ' STRING_BUILD
SUB_STRING ' STRING_LITERAL

# --- Others ---
IDENTIFIER A..Z,a..z,0..9,_ IDENTIFIER
