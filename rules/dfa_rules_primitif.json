{
  "Start_state": "START",
  "Final_states": ["START", "IDENTIFIER", "COLON", "SEMICOLON", "NUMBER", "DOT", "COMMA", "LT", "LEQ", "NEQ", "GT", "EQ", 
                  "ARITHMETIC_OP", "NEGATIVE", "SUBSTRACT", "DIVIDE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COMMENT_START", 
                  "COMMENT_END", "LEQ", "NEQ", "GEQ", "ASSIGNMENT_OP", "NUMBER_FLOAT", "S_NUMBER", "RANGE_OPERATOR", 
                  "CHAR_LITERAL", "STRING_LITERAL", "COMMENT_START_P", "COMMENT_END_P", "COMMENT_START_B", "COMMENT_END_B"
                  , "COMMENT_START_S", "COMMENT_END_S"],
  "Transitions": [
    ["START", "A..Z,a..z,_", "IDENTIFIER"],
    ["START", ":", "COLON"],
    ["START", ";", "SEMICOLON"],
    ["START", "0..9", "NUMBER"],
    ["START", ".", "DOT"],
    ["START", ",", "COMMA"],
    ["START", "'", "APOSTROPHE"],
    ["START", "<", "LT"],
    ["START", ">", "GT"],
    ["START", "=", "EQ"],
    ["START", "+,*", "ARITHMETIC_OP"],
    ["START", "/", "DIVIDE"],
    ["START", "-", "NEGATIVE"],
    ["START", "(", "LPAREN"],
    ["START", ")", "RPAREN"],
    ["START", "[", "LBRACK"],
    ["START", "]", "RBRACK"],
    ["START", "{", "COMMENT_START_B"],
    ["DIVIDE", "/", "COMMENT_START_S"],
    ["COMMENT_START_S", "ALL_EXCEPT \n", "COMMENT_S"],
    ["COMMENT_START_S", "\n", "COMMENT_END_S"],
    ["COMMENT_S", "ALL_EXCEPT \n", "COMMENT_S"],
    ["COMMENT_S", "\n", "COMMENT_END_S"],
    ["LPAREN", "*", "COMMENT_START_P"],
    ["COMMENT_START_P", "*", "COMMENT_END_TEMP_P"],
    ["COMMENT_START_P", "ALL_EXCEPT *", "COMMENT_P"],
    ["COMMENT_P", "*", "COMMENT_END_TEMP_P"],
    ["COMMENT_P", "ALL_EXCEPT *", "COMMENT_P"],
    ["COMMENT_END_TEMP_P", "ALL_EXCEPT )", "COMMENT_P"],
    ["COMMENT_END_TEMP_P", "*", "COMMENT_END_TEMP_P"],
    ["COMMENT_END_TEMP_P", ")", "COMMENT_END_P"],
    ["COMMENT_START_B", "ALL_EXCEPT }", "COMMENT_B"],
    ["COMMENT_B", "ALL_EXCEPT }", "COMMENT_B"],
    ["COMMENT_B", "}", "COMMENT_END_B"],
    ["LT", "=", "LEQ"],
    ["LT", ">", "NEQ"],
    ["GT", "=", "GEQ"],
    ["COLON", "=", "ASSIGNMENT_OP"],
    ["IDENTIFIER", "A..Z,a..z,0..9,_", "IDENTIFIER"],
    ["NUMBER", "0..9", "NUMBER"],
    ["NUMBER", ".", "NUMBER_DOT"],
    ["NUMBER_DOT", "0..9", "NUMBER_FLOAT"],
    ["NUMBER_FLOAT", "0..9", "NUMBER_FLOAT"],
    ["NUMBER", "e,E", "NOTATION"],
    ["NUMBER_FLOAT", "e,E", "NOTATION"],
    ["NOTATION", "+,-", "NOTATION_OP"],
    ["NOTATION", "0..9", "S_NUMBER"],
    ["NOTATION_OP", "0..9", "S_NUMBER"],
    ["S_NUMBER", "0..9", "S_NUMBER"],
    ["DOT", ".", "RANGE_OPERATOR"],
    ["APOSTROPHE", "ALL_EXCEPT '", "CHAR_BUILD"],
    ["CHAR_BUILD", "ALL_EXCEPT '", "STRING_BUILD"],
    ["CHAR_BUILD", "'", "CHAR_LITERAL"],
    ["CHAR_LITERAL", "'", "SUB_STRING"],
    ["STRING_BUILD", "ALL_EXCEPT '", "STRING_BUILD"],
    ["STRING_BUILD", "'", "STRING_LITERAL"],
    ["STRING_LITERAL", "'", "SUB_STRING"],
    ["SUB_STRING", "ALL_EXCEPT '", "STRING_BUILD"],
    ["SUB_STRING", "'", "STRING_LITERAL"]
  ],
  "Token_mapping": {
    "IDENTIFIER": "IDENTIFIER",
    "ARITHMETIC_OP": "ARITHMETIC_OPERATOR",
    "NEGATIVE": "ARITHMETIC_OPERATOR",
    "DIVIDE": "ARITHMETIC_OPERATOR",
    "LEQ": "RELATIONAL_OPERATOR",
    "NEQ": "RELATIONAL_OPERATOR",
    "GEQ": "RELATIONAL_OPERATOR",
    "LT": "RELATIONAL_OPERATOR",
    "GT": "RELATIONAL_OPERATOR",
    "EQ": "RELATIONAL_OPERATOR",
    "ASSIGNMENT_OP": "ASSIGN_OPERATOR",
    "RANGE_OPERATOR": "RANGE_OPERATOR",
    "NUMBER": "NUMBER",
    "NUMBER_FLOAT": "NUMBER",
    "NOTATION": "NUMBER",
    "NOTATION_OP": "NUMBER",
    "S_NUMBER": "NUMBER",
    "CHAR_LITERAL": "CHAR_LITERAL",
    "STRING_LITERAL": "STRING_LITERAL",
    "SEMICOLON": "SEMICOLON",
    "COMMA": "COMMA",
    "COLON": "COLON",
    "DOT": "DOT",
    "LPAREN": "LPARENTHESIS",
    "RPAREN": "RPARENTHESIS",
    "LBRACK": "LBRACKET",
    "RBRACK": "RBRACKET",
    "COMMENT_START": "COMMENT_START",
    "COMMENT_END": "COMMENT_END",
    "COMMENT_START_P": "COMMENT_START",
    "COMMENT_END_P": "COMMENT_END",
    "COMMENT_START_B": "COMMENT_START",
    "COMMENT_END_B": "COMMENT_END",
    "COMMENT_START_S": "COMMENT_START",
    "COMMENT_END_S": "COMMENT_END"
  },
  "Error_states": {
    "STRING_BUILD": "String not closed",
    "SUB_STRING": "String not closed",
    "CHAR_BUILD": "Character not closed",
    "NOTATION": "Invalid scientific notation",
    "NOTATION_OP": "Invalid scientific notation",
    "COMMENT_P": "Comment not closed",
    "COMMENT_END_TEMP_P": "Comment not closed",
    "COMMENT_B": "Comment not closed"
  }
}
